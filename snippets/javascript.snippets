global !p

def camelize_module(str):
	if str == 'child_process':
		return 'childProcess'

	components = str.split('-')
	return components[0] + ''.join(x.title() for x in components[1:])

endglobal

snippet strict
'use strict';
$0
endsnippet

snippet fn
function $1($2) {
	$0
}
endsnippet

snippet if
if ($1) {
	$0
}
endsnippet

snippet while
while ($1) {
	$0
}
endsnippet

snippet for
for ($1) {
	$0
}
endsnippet

snippet iife
(function () {
	$0
})();
endsnippet

snippet class
class $1 {
	$0
}
endsnippet

snippet re
require('$0')
endsnippet

# This snippet will let you type in the module name, camelcase it and use that
# as a variable name.
#
# Exception is the core Node.js `child_process` module which has a snake_cased
# name.
#
# Example:
# var ghGot = require('gh-got');
# var childProcess = require('child_process');
#
snippet req
var `!p snip.rv = camelize_module(t[1])` = require('$1');
endsnippet


# ============================================================================
# BDD
# ============================================================================
snippet it
it('$1', function () {
	$0
});
endsnippet

snippet ita
it('$1', function (done) {
	$0
});
endsnippet

snippet describe
describe('$1', function () {
	$0
});
endsnippet

# ============================================================================
# CommonJS assertions
# ============================================================================
snippet as:eq
assert.equal($0);
endsnippet

snippet as:deq
assert.deepEqual($0);
endsnippet

snippet as:seq
assert.strictEqual($0);
endsnippet

snippet as:th
assert.throws(function () {
	$0
});
endsnippet
